# -*- coding: utf-8 -*-
"""make_lyrics_word2vec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ZhJh9McQm5xmecpfC6Y4UVad50aBVzj
"""

#!pip install gensim
#!pip install Pillow

from studentcard import StudentCard
from mainshopcharger import MainShopCharger

LYRICS_MODEL_FILEPATH='./lyrics.model'
IMAGE_FILEPATH='./student_image_1.png'
EDIT_IMAGE_FILEPATH='./student_image_1_edit.png'

import pandas as pd
import nltk

def make_model(band):
  if type(band) is not str:
      return
    
  nltk.download('punkt')

  df = pd.read_csv('./songdata.csv')

  lyrics_count=0

  words=[]
  for string in df['text']:
    if band==df['artist'][lyrics_count]:
      words .append(nltk.word_tokenize(string))
    lyrics_count+=1

  model = word2vec.Word2Vec(words, sg=1, size=100, min_count=15, window=15, iter=3)
  model.save(LYRICS_MODEL_FILEPATH)
  
  return model

from gensim.models import word2vec
import gensim
from PIL import Image, ImageDraw, ImageFont

def make_ID_card(card,result):
  if card is None:
    return

  offset=20
  offset_count=0

  write_list=[card.student_name,card.student_num,card.account_balance,card.artist_name+' thought that '+','.join(card.artist_words)+' is kind of '+result[0][0]]
  
  draw=ImageDraw.Draw(card.student_image)
  font = ImageFont.load_default()

  for word in write_list:
    draw.multiline_text((0,offset*offset_count),str(word),fill=(0, 0, 0), font=font)
    offset_count+=1

  card.student_image.save(EDIT_IMAGE_FILEPATH+str(card.student_num)+'.png', quality=95)


if __name__ == "__main__":
  charger=MainShopCharger()
  StudentCard1=StudentCard('A',1,'Queen',['love'],IMAGE_FILEPATH)
  StudentCard2=StudentCard('B',2,'Lady Gaga',['love'],IMAGE_FILEPATH)

  charger.chargeMoney(1000)
  charger.printLatestChargeDate()

  charger.insertStudentCard(StudentCard1)
  charger.chargeMoney(1000)
  charger.printLatestChargeDate()
  charger.printAccountBalance()

  charger.insertStudentCard(StudentCard2)
  charger.chargeMoney(3000)
  charger.printLatestChargeDate()
  charger.printAccountBalance()

  model1=make_model(StudentCard1.artist_name)
  result1=model1.most_similar(positive=StudentCard1.artist_words)

  model2=make_model(StudentCard2.artist_name)
  result2=model2.most_similar(positive=StudentCard2.artist_words)

  make_ID_card(StudentCard1,result1)
  make_ID_card(StudentCard2,result2)